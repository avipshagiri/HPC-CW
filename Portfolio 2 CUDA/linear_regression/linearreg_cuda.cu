#include <stdio.h>
#include <math.h>
#include <time.h>
#include <unistd.h>
#include <cuda_runtime_api.h> 
#include <errno.h>
#include <unistd.h>
/******************************************************************************
 * This program takes an initial estimate of m and c and finds the associated 
 * rms error. It is then as a base to generate and evaluate 8 new estimates, 
 * which are steps in different directions in m-c space. The best estimate is 
 * then used as the base for another iteration of "generate and evaluate". This 
 * continues until none of the new estimates are better than the base. This is
 * a gradient search for a minimum in mc-space.
 * 
 * To compile:
 *   nvcc -o linearregcuda linearreg_cuda.cu -lm
 * 
 * To run:
 *   ./linearcuda
 * 
 * 
 *****************************************************************************/

typedef struct point_t{
double x;
double y;
}point_t;

int n_data = 1000;
__device__ int d_n_data =1000;

point_t data[] = {
  {83.93,138.55},{72.52,122.82},{65.75,119.88},{72.44,139.81},
  {65.08,112.81},{82.02,126.86},{73.57,124.36},{89.27,157.88},
  {65.60,103.79},{82.17,120.94},{77.33,137.19},{85.58,142.59},
  {74.61,134.50},{65.89,108.69},{72.11,132.32},{73.60,121.80},
  {68.02,103.77},{13.40,59.66},{ 0.31,32.08},{53.48,96.97},
  {45.68,81.56},{98.36,165.62},{46.28,94.74},{45.52,113.26},
  {22.58,51.72},{72.86,126.99},{19.59,46.60},{87.54,128.13},
  {16.09,51.26},{69.70,122.62},{33.05,86.34},{63.33,110.83},
  {93.93,149.98},{ 0.92,27.15},{26.38,71.82},{57.05,98.26},
  {16.21,61.96},{31.67,69.41},{13.43,59.64},{ 8.46,49.44},
  {95.89,150.25},{95.43,167.23},{69.53,127.36},{34.46,77.43},
  {60.35,107.34},{ 0.50,35.08},{90.66,157.80},{16.78,64.26},
  {69.74,134.40},{ 0.25,41.74},{53.23,93.57},{80.17,135.71},
  { 6.54,33.28},{34.11,87.78},{ 2.86,19.95},{32.56,69.15},
  {28.28,62.91},{33.17,90.85},{ 7.62,46.39},{68.16,115.15},
  {92.35,147.88},{21.23,65.80},{47.14,85.59},{87.77,119.15},
  {76.12,137.95},{37.49,74.92},{39.29,80.00},{44.71,90.70},
  {42.10,104.10},{28.34,54.37},{50.45,85.02},{56.47,92.47},
  {35.22,75.02},{88.57,166.80},{ 6.07,38.95},{63.48,118.90},
  {76.77,142.52},{18.75,74.67},{28.78,74.43},{43.84,100.43},
  { 0.16,26.37},{29.21,65.85},{62.72,133.16},{39.25,66.23},
  {85.05,147.58},{73.38,113.21},{46.34,82.59},{68.40,119.47},
  {11.44,56.74},{19.95,65.39},{79.29,137.38},{79.80,142.68},
  {52.15,112.49},{56.03,115.50},{67.16,115.66},{85.33,129.00},
  {34.29,70.72},{97.74,151.99},{68.56,104.55},{49.97,71.59},
  {46.38,71.61},{89.20,157.85},{54.90,98.79},{ 6.74,47.96},
  {19.67,77.69},{55.14,108.36},{33.86,81.18},{10.20,43.16},
  {42.03,89.50},{80.17,147.56},{85.07,142.96},{41.73,99.97},
  {20.68,63.65},{73.40,144.82},{49.25,109.76},{27.89,69.11},
  {80.33,146.00},{21.38,49.85},{62.95,118.61},{ 1.44,27.12},
  {94.38,153.81},{83.01,152.04},{59.41,106.51},{95.76,149.08},
  { 5.90,30.95},{ 3.18,29.72},{11.16,48.38},{76.40,143.36},
  {68.93,136.55},{62.07,107.83},{80.17,132.10},{58.48,106.66},
  {69.13,107.67},{81.88,142.73},{81.70,137.70},{40.60,88.39},
  {66.65,119.79},{22.91,68.87},{38.13,66.58},{69.03,130.53},
  {90.24,155.14},{46.52,86.41},{14.99,56.92},{75.56,115.17},
  {18.09,56.09},{30.52,78.03},{93.37,165.99},{ 4.26,31.92},
  {30.94,81.34},{ 8.43,64.08},{42.79,99.67},{70.30,122.75},
  {47.69,85.80},{64.77,104.36},{29.11,65.52},{46.10,87.98},
  {12.27,52.14},{24.33,60.38},{ 0.52,37.89},{14.99,38.50},
  {98.12,174.95},{26.33,62.86},{61.20,107.48},{ 0.21,50.65},
  {85.41,153.44},{23.29,72.59},{44.86,98.04},{13.70,33.42},
  {44.89,87.27},{69.07,121.71},{75.31,125.88},{70.98,124.66},
  {74.63,129.20},{57.62,99.19},{ 4.93,47.07},{ 6.99,45.55},
  {32.47,72.47},{61.36,108.31},{66.23,117.36},{74.85,147.03},
  {27.07,61.46},{41.34,90.76},{90.58,162.86},{25.15,58.14},
  {81.85,127.93},{56.80,107.64},{ 8.75,40.27},{13.11,51.97},
  {47.54,99.42},{55.85,121.85},{91.99,149.87},{35.93,83.03},
  {86.70,150.77},{57.26,104.50},{83.18,137.18},{62.85,111.72},
  {66.38,100.51},{38.15,64.34},{78.34,130.14},{29.41,63.87},
  {30.56,80.40},{24.52,64.02},{45.21,105.62},{ 6.72,39.72},
  {11.67,56.33},{19.46,49.66},{40.88,93.53},{25.62,66.98},
  { 7.75,44.96},{39.61,73.33},{31.31,75.18},{31.02,67.79},
  { 0.84,26.65},{73.96,121.34},{56.48,94.16},{ 7.42,53.64},
  {97.33,153.93},{76.93,139.36},{85.29,155.48},{14.61,36.13},
  {60.27,98.15},{30.24,63.36},{96.60,167.11},{10.60,48.26},
  {75.55,127.98},{47.79,99.14},{68.76,139.37},{49.20,85.70},
  {70.12,126.18},{ 9.64,55.50},{65.00,110.46},{ 5.80,27.32},
  {58.13,107.53},{80.65,125.69},{57.07,113.42},{ 2.46,36.25},
  {34.52,74.94},{89.00,160.87},{13.12,47.48},{75.78,137.21},
  {13.07,58.64},{91.07,156.47},{16.42,42.15},{44.37,90.97},
  {16.50,57.42},{34.72,71.51},{ 2.49,35.96},{68.34,118.72},
  { 2.28,20.73},{52.53,104.94},{19.33,57.68},{46.63,87.49},
  { 4.04,51.35},{36.31,73.48},{75.46,121.14},{23.63,51.63},
  {41.66,79.94},{94.64,150.47},{77.09,145.92},{87.76,142.38},
  { 5.90,31.17},{82.27,145.91},{81.11,132.03},{63.29,110.70},
  {92.95,155.73},{82.20,138.97},{93.85,160.15},{43.27,86.28},
  {32.35,81.14},{47.96,81.16},{50.27,112.29},{12.64,56.54},
  {50.56,101.93},{28.53,76.30},{41.70,92.57},{ 2.14,38.56},
  {47.53,90.55},{83.69,145.56},{63.20,114.75},{23.49,60.50},
  {45.48,66.42},{ 1.44,47.74},{ 6.53,39.36},{35.93,81.55},
  {39.04,71.04},{72.88,98.95},{17.30,57.22},{42.46,89.02},
  {65.29,130.02},{43.40,81.51},{70.75,126.68},{85.97,140.38},
  {71.37,116.03},{57.68,102.87},{48.73,109.81},{29.54,61.81},
  {12.99,36.72},{58.51,100.83},{55.06,115.84},{41.27,81.68},
  {95.46,139.08},{40.07,90.85},{64.05,117.87},{42.29,91.06},
  {90.98,144.57},{29.16,68.37},{ 7.83,42.00},{48.06,86.27},
  {94.48,157.82},{89.99,149.87},{35.20,71.98},{32.22,56.62},
  {47.09,98.59},{85.54,127.16},{36.72,82.94},{36.01,75.92},
  { 6.90,29.41},{27.79,61.96},{90.41,151.25},{24.80,58.27},
  { 3.15,27.08},{41.65,78.81},{ 5.68,53.98},{ 1.34,37.18},
  {26.34,60.24},{81.94,138.61},{61.67,106.42},{95.19,140.32},
  {85.58,136.69},{43.53,78.15},{80.18,125.00},{97.18,162.47},
  {72.37,144.27},{89.73,162.32},{41.43,77.31},{42.75,95.42},
  {68.74,113.34},{15.64,34.64},{ 9.24,45.07},{37.89,102.87},
  {10.48,59.05},{48.86,98.02},{ 5.63,36.69},{72.08,102.79},
  {92.33,149.56},{16.73,45.24},{46.36,90.80},{24.83,68.06},
  {80.48,150.63},{20.98,64.45},{80.63,143.90},{96.88,150.88},
  {14.64,43.47},{42.90,102.30},{30.41,75.91},{46.39,119.63},
  {76.53,131.83},{94.93,154.39},{28.47,66.64},{34.51,70.97},
  {25.38,60.99},{88.59,121.79},{35.45,59.41},{73.00,131.11},
  {24.03,33.96},{56.43,106.18},{ 3.47,57.03},{56.44,100.79},
  {64.50,120.89},{76.78,127.02},{10.71,50.09},{31.62,71.31},
  {67.89,135.90},{18.74,58.15},{25.99,64.30},{64.99,116.96},
  { 4.05,30.48},{73.02,134.72},{80.37,123.35},{14.33,51.49},
  {83.51,133.53},{85.37,132.10},{21.45,63.42},{12.50,46.08},
  {19.10,56.52},{14.77,50.66},{ 6.19,40.86},{79.33,138.71},
  {67.03,135.44},{87.19,137.83},{18.56,64.58},{43.95,85.47},
  { 2.68,45.61},{19.80,69.46},{63.85,122.97},{32.66,74.13},
  {22.52,54.51},{69.10,113.45},{96.13,152.68},{78.26,116.72},
  {75.35,150.20},{40.42,65.87},{66.04,117.46},{61.18,125.02},
  {91.26,158.82},{28.78,78.74},{83.82,149.69},{37.04,92.22},
  {59.71,132.27},{86.71,155.44},{44.21,105.01},{64.64,124.00},
  {81.08,126.04},{90.40,143.03},{28.99,63.60},{10.61,43.34},
  { 6.09,35.67},{86.80,146.80},{ 4.74,40.51},{22.16,75.61},
  {95.42,160.87},{42.31,97.11},{79.45,127.72},{67.70,133.21},
  {44.97,81.59},{62.14,106.48},{49.11,89.51},{23.15,49.57},
  {69.43,117.25},{32.52,84.45},{38.18,88.52},{20.37,57.94},
  {17.90,58.25},{87.61,149.04},{70.18,124.13},{59.29,111.64},
  {81.08,119.48},{27.53,62.26},{75.90,147.53},{49.54,91.74},
  {96.57,143.68},{26.88,62.99},{33.53,74.65},{13.78,60.12},
  {77.20,136.76},{36.36,57.36},{69.37,121.64},{43.13,94.04},
  {44.73,85.18},{59.19,93.87},{92.70,159.41},{57.89,110.56},
  { 4.97,43.11},{30.12,80.07},{67.29,115.70},{56.82,93.89},
  {79.96,145.69},{ 0.24,32.68},{36.35,81.48},{53.27,96.14},
  {58.14,119.24},{23.07,72.66},{21.82,85.44},{85.62,136.62},
  {39.98,90.70},{66.47,132.12},{ 5.88,40.04},{16.93,54.79},
  {88.44,147.54},{27.78,71.00},{17.21,45.88},{27.28,55.77},
  {31.21,69.12},{53.56,102.01},{61.31,108.07},{53.82,89.92},
  {59.13,107.76},{84.00,133.95},{48.37,91.23},{26.28,81.03},
  {42.29,82.81},{49.67,106.51},{43.70,101.04},{80.43,129.00},
  { 1.48,19.30},{64.68,127.26},{71.79,142.68},{95.74,161.99},
  {84.81,156.18},{65.74,124.08},{11.29,54.95},{69.57,113.88},
  {67.90,111.80},{83.08,150.54},{24.01,75.08},{20.45,64.25},
  {24.65,83.77},{ 4.36,28.30},{63.47,113.95},{50.57,116.85},
  {58.74,91.76},{62.64,108.21},{80.94,144.01},{53.31,94.00},
  { 9.96,59.07},{86.10,141.11},{72.80,137.84},{64.29,106.70},
  {87.24,148.45},{40.74,85.65},{ 7.67,57.36},{96.32,159.90},
  {51.56,89.97},{ 6.07,38.84},{57.09,122.71},{57.50,109.01},
  {55.54,122.09},{88.57,151.62},{ 2.29,33.75},{54.25,99.13},
  {91.02,172.53},{37.02,65.41},{40.93,101.27},{35.47,84.82},
  {81.22,138.00},{84.63,130.37},{45.65,88.35},{94.18,164.19},
  {87.71,155.91},{ 9.19,48.52},{94.96,136.92},{71.01,110.69},
  {68.79,128.29},{40.52,92.34},{ 8.73,47.66},{ 2.06,44.89},
  {97.18,147.83},{34.26,60.40},{14.18,58.46},{52.38,117.49},
  {14.48,62.38},{ 6.10,52.04},{81.05,130.25},{ 3.48,35.73},
  {73.78,144.59},{10.79,42.76},{49.91,109.72},{79.61,129.90},
  {27.31,72.39},{87.00,132.94},{36.59,100.57},{61.76,108.79},
  {38.06,71.50},{64.91,136.85},{20.14,76.01},{45.45,94.73},
  {61.91,97.69},{42.14,95.23},{76.44,140.26},{ 5.81,46.83},
  {37.34,100.85},{87.30,150.03},{ 1.51,37.72},{92.90,134.24},
  {95.33,136.51},{73.18,124.70},{98.83,150.63},{11.76,68.35},
  {80.05,127.30},{68.51,126.88},{57.05,126.94},{83.51,147.29},
  {87.99,139.28},{22.63,61.08},{61.78,110.76},{ 0.77,40.86},
  {29.04,91.19},{22.65,62.93},{57.23,104.92},{51.11,118.38},
  {55.48,118.49},{80.82,142.60},{94.31,142.94},{73.06,123.22},
  {60.08,127.92},{20.41,42.15},{ 2.02,35.70},{26.47,62.19},
  {78.80,131.93},{53.90,95.36},{87.28,153.11},{18.51,60.06},
  {94.25,165.01},{77.61,124.99},{43.87,78.29},{81.91,129.31},
  {49.34,93.72},{65.69,120.60},{82.54,135.66},{89.34,143.95},
  {59.15,115.08},{16.27,42.15},{86.27,148.26},{40.22,84.98},
  {56.84,113.68},{46.54,98.73},{69.43,129.22},{96.92,157.81},
  {19.39,61.83},{98.25,174.25},{74.10,127.68},{31.81,79.36},
  {10.55,34.88},{45.75,81.79},{69.75,120.53},{18.79,67.94},
  {70.13,117.97},{19.16,60.13},{96.15,175.37},{88.82,174.16},
  {22.49,63.91},{53.78,112.52},{87.44,135.97},{16.95,54.24},
  { 4.69,41.55},{86.09,155.43},{74.00,138.94},{56.21,101.64},
  {22.33,73.11},{84.20,134.62},{39.29,88.79},{17.79,44.85},
  { 5.19,24.15},{ 0.42,24.56},{ 6.39,36.61},{28.84,75.02},
  { 7.40,27.75},{26.10,83.45},{88.61,152.71},{11.08,60.03},
  {68.59,134.87},{93.87,158.37},{50.86,101.59},{24.78,59.72},
  { 3.28,42.54},{53.86,111.14},{76.42,149.08},{91.46,143.44},
  {32.48,68.59},{64.87,118.38},{67.13,113.34},{83.72,123.72},
  {50.74,82.96},{64.54,112.22},{68.64,112.28},{78.30,124.84},
  {33.29,87.20},{96.31,149.51},{92.26,150.48},{46.82,101.00},
  {56.04,95.14},{24.15,64.23},{53.74,105.95},{80.23,147.26},
  {90.44,145.88},{25.85,50.78},{76.17,134.98},{30.77,89.23},
  {76.70,141.78},{80.85,140.80},{31.00,80.52},{ 6.18,47.46},
  {58.01,120.82},{92.60,153.36},{ 1.42,19.57},{32.41,72.42},
  {69.28,133.70},{ 9.76,43.95},{91.50,160.92},{46.78,92.37},
  {32.49,99.91},{67.14,122.63},{12.76,42.72},{72.32,137.30},
  {84.35,130.13},{ 7.77,48.91},{51.27,89.46},{55.28,112.12},
  {67.97,133.39},{31.13,55.41},{35.17,83.88},{69.97,125.33},
  {32.83,67.16},{79.67,136.73},{44.47,105.74},{25.49,77.04},
  {70.12,129.90},{26.96,65.71},{17.51,37.12},{90.31,162.05},
  { 4.09,41.32},{87.08,160.68},{72.63,134.35},{44.82,92.09},
  {92.11,168.35},{21.54,52.57},{41.01,89.99},{63.90,109.83},
  {88.17,154.35},{43.26,103.70},{73.85,153.34},{17.56,54.53},
  {70.13,141.42},{81.79,130.61},{32.92,65.19},{13.86,56.05},
  {65.98,120.44},{69.38,142.25},{70.31,135.35},{15.31,70.37},
  {57.01,108.61},{28.82,72.69},{91.81,143.65},{10.36,40.88},
  {76.55,140.72},{ 0.16,43.74},{51.14,84.90},{69.35,127.84},
  {48.41,117.74},{ 3.20,31.09},{69.39,130.73},{48.14,95.01},
  {86.38,130.90},{95.01,157.76},{36.10,80.19},{81.70,157.52},
  {74.01,130.55},{52.70,98.00},{47.05,92.58},{18.86,73.69},
  {99.81,177.39},{42.58,85.86},{87.36,143.96},{88.59,146.86},
  {11.78,46.42},{38.22,69.07},{45.15,91.00},{95.72,160.53},
  {79.70,151.23},{26.54,60.76},{34.48,65.17},{ 1.30,42.50},
  {16.02,50.61},{16.89,39.35},{27.74,57.75},{84.22,145.18},
  {93.30,158.41},{61.90,109.51},{95.01,151.90},{72.08,124.39},
  {66.39,113.08},{35.20,94.10},{81.76,136.24},{76.62,147.22},
  {10.27,34.46},{66.68,124.17},{14.11,45.76},{86.00,128.71},
  {79.77,135.12},{97.39,156.73},{42.78,91.86},{37.94,79.97},
  {78.91,139.30},{11.36,39.99},{89.52,176.96},{30.14,69.25},
  {29.96,59.10},{56.44,84.61},{60.42,112.61},{ 0.46,18.37},
  {84.28,151.89},{13.08,69.80},{54.32,103.93},{80.00,125.14},
  {57.69,112.88},{64.95,109.12},{64.57,125.66},{ 6.81,40.09},
  { 0.33,42.09},{59.28,108.39},{89.30,142.41},{98.57,162.71},
  {31.85,71.60},{18.61,44.87},{76.37,133.43},{83.08,145.78},
  {11.84,40.90},{81.95,131.01},{75.93,124.21},{53.90,96.87},
  {29.33,71.10},{24.52,63.89},{22.83,58.46},{34.00,90.81},
  {42.13,71.98},{15.23,53.27},{27.19,66.93},{33.64,84.89},
  {91.75,148.25},{80.39,133.27},{71.78,116.56},{57.73,109.62},
  {18.23,68.03},{14.49,41.69},{75.37,135.10},{ 0.16,38.89},
  {14.78,66.76},{47.19,80.92},{15.93,37.76},{35.52,57.09},
  {43.08,81.20},{29.83,52.19},{72.29,131.16},{80.66,141.31},
  {75.16,142.95},{37.29,104.63},{ 5.43,49.61},{85.20,136.08},
  {68.02,128.15},{12.87,60.53},{83.30,124.03},{ 9.54,57.03},
  {49.01,100.62},{83.58,134.65},{78.51,114.55},{21.09,65.51},
  {50.09,84.70},{32.46,59.39},{48.97,87.15},{36.99,102.00},
  {78.10,141.60},{84.68,146.88},{ 6.22,53.86},{99.89,164.32},
  {86.09,127.43},{88.37,148.92},{16.25,56.35},{43.39,98.05},
  {54.42,112.46},{65.59,112.13},{50.92,99.20},{22.42,58.63},
  {92.66,158.65},{85.73,146.58},{84.56,141.25},{51.72,107.39},
  { 4.75,50.91},{42.75,106.40},{45.60,109.30},{67.87,119.60},
  {29.04,83.16},{98.19,165.23},{39.40,95.26},{78.21,141.99},
  { 3.72,30.08},{54.79,93.37},{21.74,58.98},{32.19,90.10},
  { 2.66,16.32},{49.64,99.26},{15.16,50.22},{ 9.40,49.22},
  {22.03,59.10},{25.18,68.57},{39.06,84.40},{73.64,121.03},
  {83.12,148.85},{88.69,140.65},{12.37,56.02},{85.53,148.62},
  {36.48,85.40},{94.91,154.71},{86.84,133.62},{89.87,146.77},
  {79.92,144.33},{77.98,136.50},{21.25,49.98},{62.50,116.43},
  {99.83,165.84},{32.41,76.30},{29.03,64.50},{42.86,97.78},
  {47.12,110.56},{ 7.96,26.81},{82.98,142.09},{92.02,158.75},
  {83.51,151.37},{42.28,85.65},{67.91,120.42},{73.50,103.47},
  {37.39,82.91},{35.91,70.12},{44.67,105.13},{66.54,118.29},
  {44.67,105.00},{38.97,83.57},{20.66,61.67},{42.93,87.86},
  {71.60,122.37},{48.66,101.28},{11.56,45.94},{51.76,98.86},
  {39.94,82.48},{60.05,102.64},{31.11,59.89},{80.29,146.27},
  {44.89,83.13},{45.84,87.27},{82.98,129.23},{ 3.70,59.54},
  {48.25,98.47},{97.44,161.37},{84.99,124.35},{20.17,64.51},
  {95.99,138.53},{74.65,114.95},{62.69,122.51},{17.60,63.37},
  {95.07,140.34},{85.11,153.88},{ 4.90,48.11},{98.32,149.20},
  {80.94,147.58},{85.69,151.15},{75.77,136.52},{49.44,98.78},
  {42.27,88.69},{31.41,59.81},{73.96,138.56},{ 4.67,40.61},
  { 6.35,19.09},{39.73,86.81},{ 7.24,47.64},{23.31,67.01},
  {88.78,138.19},{88.67,136.16},{41.81,75.81},{67.60,128.29},
  {88.26,154.91},{50.61,100.22},{13.98,26.01},{80.92,129.02},
  {28.74,88.34},{12.36,44.23},{68.49,116.10},{55.66,102.21},
  {93.29,154.69},{67.40,139.27},{71.30,134.93},{ 3.38,49.83},
  {77.36,134.60},{17.47,55.60},{19.14,48.89},{39.04,94.50},
  {21.94,62.29},{78.69,128.35},{71.75,118.48},{99.31,170.87},
  { 1.67,37.14},{61.28,106.12},{77.28,132.02},{42.39,94.44},
  {16.77,52.25},{39.24,93.11},{53.08,89.75},{62.60,121.08},
  {66.30,127.72},{73.39,111.45},{62.33,121.65},{92.20,141.36},
  {62.74,109.55},{54.99,104.45},{23.84,53.39},{39.62,86.73},
  {92.33,138.31},{ 3.53,16.56},{53.26,109.60},{86.69,139.40},
  {40.71,76.31},{92.11,147.09},{67.87,119.73},{20.73,51.21},
  {97.95,152.69},{72.81,129.82},{65.27,149.39},{57.35,103.25},
  {22.47,71.81},{94.28,153.77},{98.91,157.04},{35.35,74.74}
};
double residual_error(double x, double y, double m, double c) {
  double e = (m * x) + c - y;
  return e * e;
}
__device__ double d_residual_error(double x, double y, double m, double c) {
  double e = (m * x) + c - y;
  return e * e;
}
double rms_error(double m, double c) {
  int i;
  double mean;
  double error_sum = 0;
  
  for(i=0; i<n_data; i++) {
    error_sum += residual_error(data[i].x, data[i].y, m, c);  
  }
  
  mean = error_sum / n_data;
  
  return sqrt(mean);
}
__global__ void d_rms_error(double *m, double *c,double *error_sum_arr,point_t *d_data) {
  int i = threadIdx.x + blockIdx.x *blockDim.x;
	error_sum_arr[i] = d_residual_error(d_data[i].x,d_data[i].y, *m, *c);
	}

int time_difference(struct timespec *start, struct timespec *finish, long long int *difference)
	{
		long long int ds = finish->tv_sec - start->tv_sec;
		long long int dn = finish->tv_nsec - start->tv_nsec;

 		if(dn < 0){
  		ds--;
  		dn += 1000000000;
	}
  		*difference = ds * 1000000000 + dn;
  		return !(*difference > 0); 
}



int main(){
 int i;
  double bm = 1.3;
  double bc = 10;
  double be;
  double dm[8];
  double dc[8];
  double e[8];
  double step = 0.01;
  double best_error = 999999999;
  int best_error_i;
  int minimum_found = 0;
  
  double om[] = {0,1,1, 1, 0,-1,-1,-1};
  double oc[] = {1,1,0,-1,-1,-1, 0, 1};

struct timespec start, finish;
	long long int time_elapsed;
	clock_gettime(CLOCK_MONOTONIC, &start);
	cudaError_t error;


double *d_dm;
double *d_dc;
double *d_error_sum_arr;
point_t *d_data;

be= rms_error(bm,bc);

error=cudaMalloc(&d_dm,(sizeof(double) * 8));
	if(error){
		fprintf(stderr,"cudaMalloc on d_dm returned %d %s\n",error,
		cudaGetErrorString(error));
		exit(1);
}
error=cudaMalloc(&d_dc,(sizeof(double) * 8));
if(error){
	fprintf(stderr,"cudaMalloc on d_dc returned %d %s\n",error,
	cudaGetErrorString(error));
	exit(1);
}

error=cudaMalloc(&d_error_sum_arr,(sizeof(double) * 1000));
if(error){
	fprintf(stderr,"cudaMalloc on d_error_sum_arr returned %d %s\n",error, //371
	cudaGetErrorString(error));
	exit(1);
}

error=cudaMalloc(&d_data,sizeof(data)); //376
if(error){
	fprintf(stderr,"cudaMalloc on d_data returned %d %s\n",error,
	cudaGetErrorString(error));
	exit(1);
}

while(!minimum_found) {
    for(i=0;i<8;i++) {
dm[i] = bm + (om[i] * step);
dc[i]= bc + (oc[i] * step);
}

 error = cudaMemcpy(d_dm,dm,(sizeof(double)*8), cudaMemcpyHostToDevice);
if(error){
	fprintf(stderr,"cudaMemcpy to d_dm returned %d %s\n",error,
	cudaGetErrorString(error));
}

 error = cudaMemcpy(d_dc,dc,(sizeof(double)*8), cudaMemcpyHostToDevice);
if(error){
	fprintf(stderr,"cudaMemcpy to d_dc returned %d %s\n",error,
	cudaGetErrorString(error));
}

error = cudaMemcpy(d_data, data,sizeof(data), cudaMemcpyHostToDevice); //401
if(error){
	fprintf(stderr,"cudaMemcpy to d_data returned %d %s\n",error,
	cudaGetErrorString(error));
}

for(i=0;i<8;i++){
double h_error_sum_arr[1000];

double error_sum_total;
double error_sum_mean;

d_rms_error <<<100,10>>>(&d_dm[i],&d_dc[i],d_error_sum_arr,d_data);
	cudaThreadSynchronize();
	error =cudaMemcpy(&h_error_sum_arr,d_error_sum_arr,(sizeof(double) *1000),
	cudaMemcpyDeviceToHost);
if(error){
	fprintf(stderr,"cudaMemcpy to error_sum returned %d %s\n",error,
	cudaGetErrorString(error));
}
for(int j=0;j<n_data;j++){
	error_sum_total+= h_error_sum_arr[j];
}
	error_sum_mean = error_sum_total / n_data;
	e[i] =sqrt(error_sum_mean);

if(e[i] < best_error){
	best_error = e[i];
	error_sum_total +=h_error_sum_arr[i];
}
error_sum_mean = error_sum_total /n_data;//431
e[i] =  sqrt(error_sum_mean); //432

if(e[i]<best_error){ //434
	best_error = e[i];
	best_error_i = i;
}
 error_sum_total = 0;  //438
}
if(best_error <be){
be=best_error;
bm =dm[best_error_i];
bc= dc[best_error_i];
}else {
minimum_found = 1;
}
}


error = cudaFree(d_dm);
if(error){
fprintf(stderr,"cudaFree on d_dm returned %d %s\n",error,
cudaGetErrorString(error));  //453
exit(1);
}

error = cudaFree(d_dc);
if(error){
fprintf(stderr,"cudaFree on d_dc returned %d %s\n",error,
cudaGetErrorString(error));
exit(1);
}

error = cudaFree(d_data);
if(error){
fprintf(stderr,"cudaFree on d_data returned %d %s\n",error,
cudaGetErrorString(error));
exit(1);
}

error = cudaFree(d_error_sum_arr);
if(error){
fprintf(stderr,"cudaFree on d_error_sum_arr returned %d %s\n",error,
cudaGetErrorString(error));
exit(1);
}


printf("minimum m,c is %lf,%lf with error %lf\n", bm, bc, be);

clock_gettime(CLOCK_MONOTONIC, &finish);
  time_difference(&start, &finish, &time_elapsed);
  printf("Time elapsed was %lldns or %0.9lfs\n", time_elapsed,
                                         (time_elapsed/1.0e9)); 

return 0;
}

;
